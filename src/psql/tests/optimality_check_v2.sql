
CREATE OR REPLACE FUNCTION BASIC_OPTIMALITY_CHECK() RETURNS INT
AS
$$
DECLARE EXPERIMENT_GROUP_ID BIGINT;
DECLARE EXPERIMENTS_TO_PERFORM INT;
DECLARE CURRENT_EXPERIMENT BIGINT;

DECLARE TARGET_W REAL DEFAULT 10;
DECLARE TARGET_X REAL DEFAULT 1024.1024;
DECLARE TARGET_Y REAL DEFAULT -50;
DECLARE TARGET_Z REAL DEFAULT -256.1286432168421;

DECLARE W REAL;
DECLARE X REAL;
DECLARE Y REAL;
DECLARE Z REAL;

	
BEGIN

	SELECT GET_ACTIVE_EXPERIMENT_GROUP() INTO EXPERIMENT_GROUP_ID;
	RAISE NOTICE 'ACTIVE EXPERIMENT GROUP ID = %', EXPERIMENT_GROUP_ID;


	-- HARD CODED DURING TESTING...
	SELECT 10 INTO EXPERIMENTS_TO_PERFORM;
	
	FOR I IN 1 .. EXPERIMENTS_TO_PERFORM LOOP

		CURRENT_EXPERIMENT = GENERATE_NEW_EXPERIMENT(EXPERIMENT_GROUP_ID);
		
		SELECT
			HCPRTC.W,HCPRTC.X,HCPRTC.Y,HCPRTC.Z
		INTO	
			W,X,Y,Z
		FROM
			HACK_CONVERT_PARAMETER_ROWS_TO_COLUMNS(CURRENT_EXPERIMENT) HCPRTC;

		RAISE NOTICE 'W,X,Y,Z: %, %, %, %' ,W,X,Y,GET_PARAMETER_VALUE(385, 'Z');
		
		PERFORM RECORD_EXPERIMENT_RESULT(CURRENT_EXPERIMENT, -HACK_GET_DISTANCE(W-TARGET_W, X-TARGET_X, Y-TARGET_Y, Z-TARGET_Z), 'NO DATA');
	END LOOP;


	RETURN CURRENT_EXPERIMENT;
END
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION HACK_GET_DISTANCE(DW REAL, DX REAL, DY REAL, DZ REAL)
RETURNS REAL
AS
$$
BEGIN
	RETURN DW * DW + DX * DX + DY * DY + DZ * DZ;
END
$$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION HACK_CONVERT_PARAMETER_ROWS_TO_COLUMNS(EXPERIMENT_ID BIGINT) 
RETURNS TABLE 
(
	W REAL,
	X REAL,
	Y REAL,
	Z REAL
)
AS
$$
	SELECT
		GET_PARAMETER_VALUE(EXPERIMENT_ID, 'W') AS W,
		GET_PARAMETER_VALUE(EXPERIMENT_ID, 'X') AS X,
		GET_PARAMETER_VALUE(EXPERIMENT_ID, 'Y') AS Y,
		GET_PARAMETER_VALUE(EXPERIMENT_ID, 'Z') AS Z;

$$
LANGUAGE SQL;


CREATE OR REPLACE FUNCTION GET_PARAMETER_VALUE(PARAM_EXPERIMENT_ID BIGINT, PARAMETER_NAME CHARACTER VARYING(128))
RETURNS REAL
AS
$$

	SELECT
		PARAMETER_VALUE
	FROM
		EXPERIMENT E
	JOIN
		PARAMETER P
	ON
		P.EXPERIMENT_ID = E.ID
	JOIN
		PARAMETER_TYPE PT
	ON
		P.PARAMETER_TYPE_ID = PT.ID
	WHERE
		E.ID = PARAM_EXPERIMENT_ID
	AND
		PT.NAME = PARAMETER_NAME
$$
LANGUAGE SQL;
